#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h> 
#include <sys/stat.h>


int FCFS(int order[][5],int orderNum){
    int P2C[4][2];
    int C2P[4][2];
    int i,j,n,m;
    int pid;
    int endTimeChild;
    int status =0;
    
    for(i = 0; i < 3 ; i++) {
        //create pipe
        if(pipe(P2C[i])<0){ /* error occurred */
            printf("pipe parent to child create failed\n");
            exit(1);
        }
        if(pipe(C2P[i])<0){ /* error occurred */
            printf("pipe child to parent create failed\n");
            exit(1);
        }
        
        pid = fork();
        
        if(pid < 0) {  /* error occurred */
            printf("Fork Failed\n");
            exit(1);
        }else if(pid==0){  //child process
            close(P2C[i][1]);
            close(C2P[i][0]);
            //implementation
            
            while((n = read(P2C[i][0],&m,sizeof(m)))>0){ //read from pipe 
                endTimeChild += m; 
                printf("the end time for child%d is %d\n",i+1,endTimeChild);
                
                write(C2P[i][1],&endTimeChild,sizeof(endTimeChild));
            }
            
            close(P2C[i][0]);
            close(C2P[i][1]);
            printf("<Line> I have complete!");
            exit(0);
            
        }else{ //parent process  
            close(P2C[i][0]);
            close(C2P[i][1]);
        }    
        
    }
    
    int equip[8][2] = {0}; // index 0-7, line number from 0-2, first avaible time 
    int currDate =0; 
    int ALEnd[3] = {0,0,0}; //end time for each line
    char buf[10];
   
    int equiptRequired[3] = {0};
    
    for (j=0; j<orderNum;j++){  // for order j 
        //check which product and its required equipment
        switch(order[j][3]){
            case 1: equiptRequired[0] = 1;
                    equiptRequired[1] = 4;break;//product A
            case 2: equiptRequired[0] = 3;break;//product B
            case 3: equiptRequired[0] = 2;
                    equiptRequired[1] = 5;
                    equiptRequired[2] = 7;break;//product C
            case 4: equiptRequired[0] = 4;
                    equiptRequired[1] = 6;
                    equiptRequired[2] = 8;break;//product D
            case 5: equiptRequired[0] = 1;
                    equiptRequired[1] = 3;
                    equiptRequired[2] = 6;break;//product E 
        }
    
        
    // check the required equiptment whether is avaible 
        for(i=0;i<3;i++){
            if(equiptRequired[i] ==0)
                break;
            if(equip[equiptRequired[i]-1][1] > currDate  ){ //equiptment not avaible
                // set to the same line and insert it later 
                
            }
        }
        
        //if all euiptment avaiable, find shortest line
        int min = ALEnd[0];
        int minLine = 0;
        for (i=1;i<3;i++){
            if(ALEnd[i] < min){
                min = ALEnd[i];
                minLine = i;
            }  
        }        
        printf("the shortest line is %d\n",minLine);
        write(P2C[minLine][1],&order[j][4],sizeof(order[j][4]));
        
        sleep(1);
        
        n = read(C2P[minLine][0],&m,sizeof(m));
        ALEnd[minLine] = m;
        printf("received information from child <%d> and end time is %d\n", minLine+1, ALEnd[minLine]);
        
        
        //close(P2C[minLine][1]);
        //close(C2P[minLine][0]);
        
        
                //not avaible 
                // find out which equiptment occupied and it's in which line 
                //skip it and when time reaches, just insert it into the same line
                
                
                // all equiptment avaible
                
                //check which schedule is shortest 
                
                
                
                //if ok, then send to line (write )
                
                //read from child and update equiptment, line, current data 
        
            
        
    //if not, marked line number and equipment number 
    // when avaible, insert it into the same line, just after the avaible time 
    }
    
    for(i=0;i<3;i++){
        close(P2C[i][1]);
        close(C2P[i][0]);
    }
    
    
    
    int cid;
    while((cid = wait(&status))>0){
        printf("Parent: Child %d collected\n",cid);
    }
    cid = wait(NULL);
    exit(0);
}

int main(){

   int order[5][5] = { //order number start from 0
       {1,0,10,1,5},// product A and quantity 5000
       {2,0,4,2,6},
       {3,1,12,4,6}, //product d, able to finish before due date
       {4,5,15,4,3},// product d, should be in line 3
       {5,4,10,1,2}
   };
   int orderNum =5; // how many order input 
    
   int value; 
   value = FCFS (order,orderNum); 
}

